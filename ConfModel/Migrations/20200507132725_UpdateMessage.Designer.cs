// <auto-generated />
using System;
using ConfModel.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ConfModel.Migrations
{
    [DbContext(typeof(ConfContext))]
    [Migration("20200507132725_UpdateMessage")]
    partial class UpdateMessage
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ConfModel.Model.AdminOfConference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConferenceId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ConferenceId");

                    b.HasIndex("UserId");

                    b.ToTable("AdminOfConferences");
                });

            modelBuilder.Entity("ConfModel.Model.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConferenceId");

                    b.Property<string>("Data")
                        .HasMaxLength(1000);

                    b.Property<string>("Title")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ConferenceId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("ConfModel.Model.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApplicationStatus");

                    b.Property<string>("Authors")
                        .HasMaxLength(300);

                    b.Property<string>("Info")
                        .HasMaxLength(8000);

                    b.Property<string>("Keywords")
                        .HasMaxLength(300);

                    b.Property<int>("SectionId");

                    b.Property<string>("Topic")
                        .HasMaxLength(300);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("ConfModel.Model.ApplicationNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApplicationId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationNotifications");
                });

            modelBuilder.Entity("ConfModel.Model.Conference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTimeFinishConference");

                    b.Property<DateTime>("DateTimeStartConference");

                    b.Property<string>("Info")
                        .HasMaxLength(8000);

                    b.Property<bool>("IsFileCheckRequired");

                    b.Property<string>("Location")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Conferences");
                });

            modelBuilder.Entity("ConfModel.Model.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApplicationId");

                    b.Property<string>("ContentType")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasMaxLength(300);

                    b.Property<double>("Size");

                    b.Property<string>("TempName")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("ConfModel.Model.FileNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FileId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("UserId");

                    b.ToTable("FileNotifications");
                });

            modelBuilder.Entity("ConfModel.Model.InfoPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConferenceId");

                    b.Property<string>("Data");

                    b.Property<string>("Title")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ConferenceId");

                    b.ToTable("InfoPages");
                });

            modelBuilder.Entity("ConfModel.Model.Lecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTimeCloseChat");

                    b.Property<DateTime>("DateTimeOpenChat");

                    b.Property<DateTime>("DateTimeStart");

                    b.Property<string>("Info")
                        .HasMaxLength(8000);

                    b.Property<int>("SectionId");

                    b.Property<string>("Topic")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("ConfModel.Model.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ApplicationId");

                    b.Property<DateTime>("DateTimeSent");

                    b.Property<int?>("LectureId");

                    b.Property<string>("Text")
                        .HasMaxLength(200);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("LectureId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("ConfModel.Model.MessageNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MessageId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("MessageNotifications");
                });

            modelBuilder.Entity("ConfModel.Model.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConferenceId");

                    b.Property<string>("Data");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Title")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ConferenceId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("ConfModel.Model.RoleInLecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LectureId");

                    b.Property<int>("Role");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("LectureId");

                    b.HasIndex("UserId");

                    b.ToTable("RoleInLectures");
                });

            modelBuilder.Entity("ConfModel.Model.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConferenceId");

                    b.Property<string>("Info")
                        .HasMaxLength(8000);

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ConferenceId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("ConfModel.Model.SectionExpert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("SectionId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("UserId");

                    b.ToTable("SectionExperts");
                });

            modelBuilder.Entity("ConfModel.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<short>("IsGlobalAdmin");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<string>("Password")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ConfModel.Model.AdminOfConference", b =>
                {
                    b.HasOne("ConfModel.Model.Conference", "Conference")
                        .WithMany("AdminOfConferences")
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ConfModel.Model.User", "User")
                        .WithMany("AdminOfConferences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ConfModel.Model.Announcement", b =>
                {
                    b.HasOne("ConfModel.Model.Conference", "Conference")
                        .WithMany("Announcements")
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ConfModel.Model.Application", b =>
                {
                    b.HasOne("ConfModel.Model.Section", "Section")
                        .WithMany("Applications")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ConfModel.Model.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ConfModel.Model.ApplicationNotification", b =>
                {
                    b.HasOne("ConfModel.Model.Application", "Application")
                        .WithMany("ApplicationNotifications")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ConfModel.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ConfModel.Model.File", b =>
                {
                    b.HasOne("ConfModel.Model.Application", "Application")
                        .WithMany("Files")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ConfModel.Model.FileNotification", b =>
                {
                    b.HasOne("ConfModel.Model.File", "File")
                        .WithMany("FileNotifications")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ConfModel.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ConfModel.Model.InfoPage", b =>
                {
                    b.HasOne("ConfModel.Model.Conference", "Conference")
                        .WithMany("InfoPages")
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ConfModel.Model.Lecture", b =>
                {
                    b.HasOne("ConfModel.Model.Section", "Section")
                        .WithMany("Lectures")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ConfModel.Model.Message", b =>
                {
                    b.HasOne("ConfModel.Model.Application", "Application")
                        .WithMany("Messages")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("ConfModel.Model.Lecture", "Lecture")
                        .WithMany("Messages")
                        .HasForeignKey("LectureId");

                    b.HasOne("ConfModel.Model.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ConfModel.Model.MessageNotification", b =>
                {
                    b.HasOne("ConfModel.Model.Message", "Message")
                        .WithMany("MessageNotifications")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ConfModel.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ConfModel.Model.News", b =>
                {
                    b.HasOne("ConfModel.Model.Conference", "Conference")
                        .WithMany("News")
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ConfModel.Model.RoleInLecture", b =>
                {
                    b.HasOne("ConfModel.Model.Lecture", "Lecture")
                        .WithMany("RoleInLectures")
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ConfModel.Model.User", "User")
                        .WithMany("RoleInLectures")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ConfModel.Model.Section", b =>
                {
                    b.HasOne("ConfModel.Model.Conference", "Conference")
                        .WithMany("Sections")
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ConfModel.Model.SectionExpert", b =>
                {
                    b.HasOne("ConfModel.Model.Section", "Section")
                        .WithMany("SectionExperts")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ConfModel.Model.User", "User")
                        .WithMany("SectionExperts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
